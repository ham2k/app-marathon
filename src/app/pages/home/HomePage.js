import * as React from "react"
import { makeStyles } from "@mui/styles"
import { useDispatch, useSelector } from "react-redux"
import { selectCurrentLog, selectEntityGroups, selectYearQSOs, setCurrentLogInfo } from "../../store/log"
import commonStyles from "../../styles/common"
import { LogLoader } from "./components/LogLoader"
import { selectSettings } from "../../store/settings"
import { EntityList } from "./components/EntityList"
import { fmtNumber } from "@ham2k/util/format"
import { Button } from "@mui/material"
import { ContentCopy, Clear, FileDownload } from "@mui/icons-material"
import generateExcel from "../../tools/generateExcel"
import { selectEntrySelections } from "../../store/entries"

const useStyles = makeStyles((theme) => ({
  ...commonStyles(theme),

  root: {
    "& h2": {
      marginTop: "1em",
      borderBottom: "2px solid #333",
    },
  },
}))

export function HomePage() {
  const dispatch = useDispatch()
  const classes = useStyles()
  const settings = useSelector(selectSettings)
  const log = useSelector(selectCurrentLog)
  const qsos = useSelector(selectYearQSOs)
  const entityGroups = useSelector(selectEntityGroups)
  const entrySelections = useSelector(selectEntrySelections)

  const handlePaste = (event) => {
    let table = document.querySelector("#excel-table")
    let range = document.createRange()
    let sel = window.getSelection()
    sel.removeAllRanges()
    range.selectNodeContents(table)
    sel.addRange(range)
    document.execCommand("copy")
    sel.removeAllRanges()
  }

  const handleDownload = (event) => {
    const lastQSO = qsos[qsos.length - 1]
    console.log(lastQSO)

    const entrant = {
      call: lastQSO.our.call,
      cqZone: lastQSO.our.cqZone,
      name: lastQSO.our.name,
      street: "123 Main St.",
      city: lastQSO.our.city,
      state: lastQSO.our.state,
      country: lastQSO.our.country,
      postal: "65432",
      email: `${lastQSO.our.call}@arrl.org`,
      club: "DX Marathon Managers",
      class: "U",
      notes: "This is a sample entry generated by Ham2K Marathon Tools",
    }

    generateExcel({ entityGroups, entrySelections, entrant })
  }

  const handleClearLog = (event) => {
    dispatch(setCurrentLogInfo({}))
  }

  return (
    <div className={classes.root}>
      <h1>Welcome to Ham2K Marathon Tools for {settings?.year}</h1>
      {log && log.qsos.length > 0 && (
        <div>
          <h2>
            {fmtNumber(qsos.length)} QSOs in {settings?.year}
            <span>
              <Button onClick={handleClearLog}>
                <Clear />
              </Button>
            </span>
            <span style={{ float: "right" }}>
              <Button onClick={handleDownload}>
                <FileDownload />
              </Button>
              <Button onClick={handlePaste}>
                <ContentCopy />
              </Button>
            </span>
          </h2>
          <EntityList qson={log} entityGroups={entityGroups} entrySelections={entrySelections} />
        </div>
      )}
      <p>
        <LogLoader title={"Load an ADIF file"} />
      </p>
    </div>
  )
}
